import os
from datetime import datetime
from docx import Document
from docx.shared import Inches, Pt
from docx.oxml.ns import qn

def is_target_file(filename):
    return filename.endswith(".docx") and filename.startswith("L") and "- UT" in filename

def format_text(doc):
    """Set all text in the document to Aptos (Body), size 9"""
    for paragraph in doc.paragraphs:
        for run in paragraph.runs:
            run.font.name = 'Aptos'
            run.font.size = Pt(9)
            run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Aptos')

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = 'Aptos'
                        run.font.size = Pt(9)
                        run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Aptos')

def resize_images_in_docx(doc_path, output_path, log_func):
    try:
        doc = Document(doc_path)
        resized_any = False

        for paragraph in doc.paragraphs:
            for run in paragraph.runs:
                if run._element.xpath('.//pic:pic'):
                    for drawing in run._element.xpath('.//w:drawing'):
                        inline = drawing.xpath('.//wp:inline')[0]
                        extent = inline.xpath('.//wp:extent')[0]

                        # Resize to width = 5 inches, maintain aspect ratio
                        new_width_emu = int(5 * 914400)
                        cx = int(extent.get('cx'))
                        cy = int(extent.get('cy'))
                        ratio = cy / cx
                        new_height_emu = int(new_width_emu * ratio)

                        extent.set('cx', str(new_width_emu))
                        extent.set('cy', str(new_height_emu))

                        for graphic in inline.xpath('.//a:graphic'):
                            for graphicData in graphic.xpath('.//a:graphicData'):
                                for pic in graphicData.xpath('.//pic:pic'):
                                    spPr = pic.xpath('.//pic:spPr')[0]
                                    xfrm = spPr.xpath('.//a:xfrm')[0]
                                    xfrm.set('cx', str(new_width_emu))
                                    xfrm.set('cy', str(new_height_emu))
                                    resized_any = True

        # Apply font formatting to all text
        format_text(doc)

        # Save document if modified or not
        doc.save(output_path)
        if resized_any:
            log_func(f"SUCCESS (Resized): {os.path.basename(doc_path)} -> {os.path.basename(output_path)}")
        else:
            log_func(f"SUCCESS (Formatted only): {os.path.basename(doc_path)} -> {os.path.basename(output_path)}")

    except Exception as e:
        log_func(f"ERROR processing {os.path.basename(doc_path)}: {str(e)}")

def log_writer(log_file_path):
    def write_log(message):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        full_msg = f"[{timestamp}] {message}"
        print(full_msg)
        with open(log_file_path, "a", encoding="utf-8") as log_file:
            log_file.write(full_msg + "\n")
    return write_log

# ==== MAIN EXECUTION ====
log_file = "conversion_log.txt"
if os.path.exists(log_file):
    os.remove(log_file)

log = log_writer(log_file)
log("=== SCRIPT STARTED ===")

directory = os.getcwd()
files_found = False

for filename in os.listdir(directory):
    if is_target_file(filename):
        files_found = True
        input_path = os.path.join(directory, filename)
        output_path = os.path.join(directory, filename.replace(".docx", "_converted.docx"))
        resize_images_in_docx(input_path, output_path, log)

if not files_found:
    log("No matching files found.")

log("=== SCRIPT FINISHED ===")
